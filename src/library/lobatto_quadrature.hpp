// This file is a part of NiHu, a C++ BEM template library.
//
// Copyright (C) 2012-2013  Peter Fiala <fiala@hit.bme.hu>
// Copyright (C) 2012-2013  Peter Rucz <rucz@hit.bme.hu>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

/**
 * \file lobatto_quadrature.hpp
 * \ingroup quadrature
 * \brief implementation of Gauss-Lobatto quadratures
 */

#ifndef LOBATTO_QUADRATURE_HPP_INCLUDED
#define LOBATTO_QUADRATURE_HPP_INCLUDED

#include <stdexcept>

/**
 * \brief return 1D N-point Lobatto quadrature
 * \tparam scalar_t the scalar type
 * \param [in] N number of quadrature points
 * \return matrix containing the Gauss-Lobatto locations and weights
 */
template <class scalar_t>
Eigen::Matrix<scalar_t, Eigen::Dynamic, 2> lobatto_impl(unsigned N)
{
	V.resize(N,2);

	switch (N)
	{
	case 1:
        V << 3.67879441171442334024e-01, 1.0;
        break;
    case 2:
        V <<
			3.29022721142147311912e-02, 1.46446609406726241387e-01,
			5.56667905035691967797e-01, 8.53553390593273730858e-01;
        break;
    case 3:
        V <<
			1.85486180762038719953e-03, 1.03892565015861349648e-02,
			1.00833931266720647213e-01, 2.78517733569240866220e-01,
			6.59829007691709712446e-01, 7.11093009929173014427e-01;
        break;
    case 4:
        V <<
			8.31328263117719662607e-05, 5.39294705561327411721e-04,
			1.07095405251668336633e-02, 3.88879085150053843689e-02,
			1.74512117034313768427e-01, 3.57418692437799667694e-01,
			7.24301389325681110876e-01, 6.03154104341633634512e-01;
        break;
    case 5:
        V <<
			3.23720309168636349506e-06, 2.33699723857762277270e-05,
			8.36896621497263759962e-04, 3.61175867992204841991e-03,
			2.74215584272799600685e-02, 7.59424496817076022381e-02,
			2.43313861216792270969e-01, 3.98666811083175920416e-01,
			7.68311276721805880285e-01, 5.21755610582808615483e-01;
        break;
    case 6:
        V <<
			1.14479052235052138136e-07, 8.98547906429621235376e-07,
			5.34124112611626401500e-05, 2.61017202814932056110e-04,
			3.10375202376170049312e-03, 1.03991974531490744688e-02,
			5.01500219915259753956e-02, 1.13373382074044973256e-01,
			3.04546314975523479962e-01, 4.17000830772120967271e-01,
			8.00237592982491086069e-01, 4.58964673949963597455e-01;
        break;
	case 7:
		V <<
			3.77174581315548608004e-09, 3.17031547899558030168e-08,
			2.94859936526343248658e-06, 1.58654643485642025329e-05,
			2.79599190011648834724e-04, 1.07401014328074558349e-03,
			7.44395426179004018885e-03, 2.06335144687169388944e-02,
			7.66982225485781515806e-02, 1.47126348657505290340e-01,
			3.58199603836869828744e-01, 4.21831277861719755595e-01,
			8.24445964388793695043e-01, 4.09318951701273914257e-01;
		break;
	case 8:
		V <<
			1.17670621600882565573e-10, 1.04800117487151037743e-09,
			1.45851239636147571560e-07, 8.48574671627253134132e-07,
			2.12635544348228913377e-05, 9.07650877335821341029e-05,
			8.70967929254090828320e-04, 2.79453623522567251580e-03,
			1.40279968635716664749e-02, 3.33434922612156486865e-02,
			1.05284756819885264023e-01, 1.75794986637171801735e-01,
			4.05067411815557998356e-01, 4.18786780814342951551e-01,
			8.43428933640770539526e-01, 3.69188589341637507513e-01;
		break;
	case 9:
		V <<
			3.51468260891144414377e-12, 3.29087403035070769252e-11,
			6.61717173273182297633e-09, 4.11076933034954830349e-08,
			1.41803717869225058478e-06, 6.59212302607535231152e-06,
			8.49892949060110109577e-05, 3.05249767093210570747e-04,
			2.01939608947090650307e-03, 5.59962661079458322300e-03,
			2.27435435621174304732e-02, 4.74605627656516024238e-02,
			1.34642096829706847672e-01, 1.99287525370885593157e-01,
			4.46096482116406733986e-01, 4.11213980423984382107e-01,
			8.58711535485662924572e-01, 3.36126421797962537941e-01,
		break;
	case 10:
		V <<
			1.01299288003514580537e-13, 9.91182721960900848067e-13,
			2.79900813789826333274e-10, 1.83956482397963082995e-09,
			8.51154019396646460001e-08, 4.24931398496268632704e-07,
			7.18305456925388091346e-06, 2.82592334959956555205e-05,
			2.41135209442335071879e-04, 7.53008388587538771836e-04,
			3.87776570645338627269e-03, 9.50151697518110058271e-03,
			3.33254570575909347951e-02, 6.20874560986777457305e-02,
			1.63925552607210145428e-01, 2.18068287611809408233e-01,
			4.82171919289186012847e-01, 4.01119929155273557964e-01,
			8.71278617867165094957e-01, 3.08441115765020146267e-01,
		break;
	default:
		throw std::out_of_range("unsupported Lobatto degree");
	}

	return V;
}

#endif // LOBATTO_QUADRATURE_HPP_INCLUDED
